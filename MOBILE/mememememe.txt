* {
    margin: 0;
    padding: 0;
    box-sizing: border-box !important;
}

/* Root Color Variables */
:root {
	--site-background: #000000; /* Example Site Background color */
    --primary-color: #0F0F0F; /* Example primary color */
    --secondary-color: #0366d6; /* Example secondary color */
    --background-color: #f9f9f9; /* Example Element Background color */
    --background-secondary-color: #33669905; /* Example Element Background secondary color */
    --text-color: #333; /* Default text color */
    --border-color: #ccc; /* Default border color */
    --main-color: 0, 186, 255; /* Default application accent color */
    --alpha-15: 0.15;
    --alpha-25: 0.25;
    --alpha-33: 0.33;
    --alpha-40: 0.4;
    --alpha-50: 0.5;
    --alpha-60: 0.6;
    --alpha-75: 0.75;
    --alpha-85: 0.85;
    --alpha-90: 0.9;
    --alpha-100: 1.0;
    --text-shadow-length: 2px 2px 4px;
    --border-basic: 1px solid;
    --box-shadow-length: 0 4px 8px;
    /* Header style variables */
    --header-bg-color: #1e1e2f;
    --header-text-color: #ffffff;
    --header-link-color: #89c9b8;
    --header-link-hover-color: #5aa48c;
    --header-border-color: #3a3a5a;
    --header-focus-outline: 2px dashed #89c9b8;
    --header-font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    --header-padding: 0.5rem 1rem 0;
    --header-gap: 1rem;
}

/* Global Styles */
body {
    font-family: Arial, sans-serif;
    margin: 1rem;
    background-color: var(--site-background);
    font-size: 13px;
    div {
    	display: block !important;
}

h2 {
    font-size: 1.2rem;
}

/* Container for equal spacing */
.container {
    padding: 0;
    max-width: 1200px; /* Set a max width for larger screens */
    margin: -0.5rem auto 0; /* Center the container */
}

  /* Header container base styles */
  header {
    width: 100%;
    background-color: var(--header-bg-color);
    color: var(--header-text-color);
    font-family: var(--header-font-family);
    padding: var(--header-padding);
    display: flex;
    flex-direction: column;
    gap: var(--header-gap);
    align-items: flex-start;
  }

  /* Flex rows used inside header */
  header .header-row {
    display: flex;
    width: 100%;
    justify-content: space-between;
    align-items: center;
    gap: var(--header-gap);
    padding-top: 0;
    margin-top: -0.5rem;
    margin-bottom: -0.25rem;
  }

  /* Typography for common header tags */
  header h1,
  header h2,
  header h3,
  header h4,
  header h5,
  header h6 {
    color: var(--header-text-color);
    line-height: 1.2;
    font-weight: 600;
    margin-bottom: 0.25rem;
  }

  /* Logo container */
  .logo {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    flex-shrink: 0;
  }

  .logo svg {
    width: 2rem;
    height: 2rem;
    fill: #3399FF;
    flex-shrink: 0;
    margin-top: -0.125rem;
  }

  /* Navigation styles */
  nav {
    width: 100%;
    position: relative;
  }

  /* Menu button */
  .menu-button {
    background: transparent;
    border: none;
    color: var(--header-link-color);
    cursor: pointer;
    padding: 0.25rem;
    padding-top: 0;
    margin-top: -0.375rem;
    border-radius: 0.125rem;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .menu-button:hover,
  .menu-button:focus {
    background-color: var(--header-border-color);
    outline-offset: 2px;
    outline: var(--header-focus-outline);
    color: var(--header-link-hover-color);
  }

  /* Hamburger icon bars */
  .menu-icon {
    width: 2rem;
    height: 2.5rem;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    line-height: 1.2;
  }

  /* Dropdown menu styles */
  .dropdown {
    position: absolute;
    top: 100%;
    left: 0;
    background-color: var(--header-bg-color);
    border: 1px solid var(--header-border-color);
    box-shadow: 0 4px 10px rgba(0,0,0,0.5);
    min-width: 200px;
    padding: 0.5rem 0;
    display: none;
    flex-direction: column;
    z-index: 1000;
  }

  /* Show dropdown when open */
  .dropdown.open {
    display: flex;
  }

  .dropdown ul {
    list-style: none;
    padding-left: 0;
  }

  .dropdown li {
    position: relative;
  }

  .dropdown li a,
  .dropdown li button.submenu-toggle {
    color: var(--header-text-color);
    text-decoration: none;
    padding: 0.5rem 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    cursor: pointer;
    background: none;
    border: none;
    width: 100%;
    font-size: 1rem;
    text-align: left;
  }

  .dropdown li a:hover,
  .dropdown li a:focus,
  .dropdown li button.submenu-toggle:hover,
  .dropdown li button.submenu-toggle:focus {
    background-color: var(--header-border-color);
    outline: none;
  }

  /* Submenu caret arrow */
  .dropdown li button.submenu-toggle::after {
    content: "â–¶";
    font-size: 0.75rem;
    transform: rotate(0deg);
    transition: transform 0.2s ease;
    margin-left: 0.5rem;
  }

  .dropdown li button.submenu-toggle[aria-expanded="true"]::after {
    transform: rotate(90deg);
  }

  /* Nested submenu */
  .dropdown ul ul {
    position: relative;
    left: 1rem;
    top: 0;
    display: none;
    flex-direction: column;
    border-left: 1px solid var(--header-border-color);
  }

  .dropdown ul ul.open {
    display: flex;
  }

  /* Search bar styling */
  form.search-form {
    display: flex;
    width: 100%;
    max-width: 280px;
    border-radius: 0.25rem;
    overflow: hidden;
    border: 1px solid var(--header-border-color);
  }

  form.search-form input[type="search"] {
    flex-grow: 1;
    border: none;
    padding: 0.5rem 0.75rem;
    font-size: 1rem;
    background-color: transparent;
    color: var(--header-text-color);
  }

  form.search-form input[type="search"]::placeholder {
    color: #a0a0a0;
  }

  form.search-form input[type="search"]:focus {
    outline: none;
    background-color: var(--header-border-color);
  }

  form.search-form button {
    background-color: var(--header-link-color);
    border: none;
    color: var(--header-text-color);
    padding: 0 1rem;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  form.search-form button:hover,
  form.search-form button:focus {
    background-color: var(--header-link-hover-color);
    outline-offset: 2px;
    outline: var(--header-focus-outline);
  }

  /* User icon */
  .user-wrapper {
  }
  
  .user-icon {
    width: 2rem;
    height: 2rem;
    fill: var(--header-link-color);
    cursor: pointer;
    flex-shrink: 0;
  }

  .user-icon:hover,
  .user-icon:focus {
    fill: var(--header-link-hover-color);
    outline-offset: 2px;
    outline: var(--header-focus-outline);
  }

  /* Mobile first layout: stacked column */
  header {
    flex-direction: column;
    align-items: stretch;
  }

  /* Order on mobile */
  .logo {
    order: 1;
  }

  .menu-wrapper {
    order: 2;
    display: flex;
    justify-content: flex-start;
  }

  form.search-form {
    order: 3;
    margin-top: 0.5rem;
  }

  .user-wrapper {
    order: 4;
    margin-top: 0.5rem;
    display: flex;
    justify-content: flex-start;
  }

/* Overlay Styles */
#import-export-box {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7); /* Semi-transparent background */
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    z-index: 1000; /* Higher than default */
}

/* Close Button Styles */
#import-export-box button {
    background-color: #007BFF; /* Bootstrap primary color */
    color: white;
    border: none;
    border-radius: 5px;
    padding: 10px 15px;
    font-size: 16px;
    cursor: pointer;
    transition: background-color 0.3s, transform 0.2s;
}

#import-export-box button:hover {
    background-color: #0056b3; /* Darker shade on hover */
    transform: scale(1.05); /* Slightly enlarge on hover */
}

/* Text Area Styles */
#import-export-box textarea {
    width: 80%;
    height: 200px;
    margin: 15px 0;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 14px;
    resize: none; /* Disable resizing */
}

/* Placeholder Text Color */
#import-export-box textarea::placeholder {
    color: #aaa; /* Light gray for placeholder */
}

/* Import URLs Button Styles */
#import-export-box button:last-of-type {
    background-color: #28A745; /* Bootstrap success color */
}

#import-export-box button:last-of-type:hover {
    background-color: #218838; /* Darker shade on hover */
}

/* Close Button Positioning */
#import-export-box button:first-of-type {
    position: absolute;
    top: 10px;
    right: 10px;
    background-color: #dc3545; /* Bootstrap danger color */
}

#import-export-box button:first-of-type:hover {
    background-color: #c82333; /* Darker shade on hover */
}


/* Style for the directory tree container */
.directory-listing {
    background-color: var(--primary-color);
    border: 2px solid rgba(var(--main-color), var(--alpha-25));; /* Subtle border */
    border-radius: 5px; /* Rounded corners */
    padding: 10px; /* Padding around the content */
    box-shadow: 0 0 8px rgba(var(--main-color), var(--alpha-33)); /* Soft shadow for depth */
    margin-top: 0.5rem;
    margin-bottom: 1.5rem;
    color: white;
}

.directory-listing span {
    display: block; /* Make the span a block-level element */
    text-align: center; /* Center the text within the span */
    margin: -5px auto 0; /* Center the span if it has a width */
    width: 100%; /* Optional: make the span take the full width of the parent */
    color: inherit;
}

.directory-listing div {
  margin-top: 5px;
  border-radius: 5px; /* Slight rounding on hover */
  border: 1px solid rgba(0, 186, 255, 0.25); /* Slight border */
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2); /* Soft shadow for depth */
  color: inherit;
}

.directory-listing ul {
  list-style: none;
  margin-left: 0;
  padding-left: 0;
  transition: max-height 0.3s ease; /* Smooth transition for height */
  overflow: hidden; /* Hide overflow */
  color: inherit;
}

.directory-listing ul > li {
  padding-right: 1rem;
}

/* Style for even top-level list items */
.directory-listing ul > li:nth-child(even) {
}

/* Style for odd top-level list items */
.directory-listing ul > li:nth-child(odd) {
}

/* Style for even nested list items */
.directory-listing ul li ul > li:nth-child(even) {
}

/* Style for odd nested list items */
.directory-listing ul li ul > li:nth-child(odd) {
}

/* Style for even items in deeper nested lists */
.directory-listing ul li ul li ul > li:nth-child(even) {
}

/* Style for odd items in deeper nested lists */
.directory-listing ul li ul li ul > li:nth-child(odd) {
}

/* Style for even items in the deepest nested lists */
.directory-listing ul li ul li ul li ul > li:nth-child(even) {
}

/* Style for odd items in the deepest nested lists */
.directory-listing ul li ul li ul li ul > li:nth-child(odd) {
}

.directory-listing li {
  padding-left: 2em;
  text-indent: -1em;
  margin-top: 0.125rem;
  margin-bottom: 0.125rem;
  color: inherit;
}

.directory-listing li:selected {
  background-color: #b4e2f3; /* Dull light blue background on hover */
  border-radius: 3px; /* Slight rounding on hover */
}

.directory-listing li:before {
  padding-right: 5px;
}

.directory-listing li.collapsed:before {
  content: "+"; /* Collapsed state */
  transition: transform 0.3s; /* Smooth rotation */
}

.directory-listing li:not(.collapsed):before {
  content: "-"; /* Expanded state */
  transition: transform 0.3s; /* Smooth rotation */
}

.directory-listing li.collapsed > ul {
  max-height: 0; /* Collapsed state */
}

.directory-listing li:not(.collapsed) > ul {
  max-height: 500px; /* Expanded state (adjust as needed) */
}

li.dragging, tr.dragging {
  opacity: 0.5;
}

li.drop-before, li.drop-after, li.drop-target {
  background: #e3f2fd;
}

/* Table styles */
.table-wrapper {
    margin: 10px auto;
}

table {
    width: 100% !important;
    border-collapse: collapse;
    background: white;
    box-shadow: 0 0 8px rgba(var(--main-color), var(--alpha-50));
    font-size: 13px;
    table-layout: fixed; /* Important for wrapping and consistent column widths */
    word-break: break-word;
    overflow-wrap: break-word;
    hyphens: auto;
    border: var(--border-basic) rgba(var(--main-color), var(--alpha-25)); /* Slight border */
    border-bottom: 1.25px solid rgba(var(--main-color), var(--alpha-50));
}

th, td {
    padding: 6px 4px;
    border-bottom: 1px solid #ddd;
    text-align: left;
    vertical-align: middle;
    white-space: normal !important;
    word-break: break-word !important;
    hyphens: auto;
    overflow-wrap: break-word;
}

th {
    background-color: var(--primary-color);
    color: white;
    padding: 10px;
    text-align: left;
}

th.desc-col {
    text-align: center;
}

td.favorite-col, td.site-col, td.desc-col {
	border-right: 1px dotted #ccc;
}

/* Fixed widths for columns */
th.favorite-col, td.favorite-col {
    width: 30px;
    text-align: center;
    white-space: nowrap !important; /* Keep star column single line */
    padding: 6px 0;
}

th.site-col, td.site-col {
    width: 25%;
    overflow-wrap: break-word;
}

th.desc-col, td.desc-col {
    width: 55%;
    overflow-wrap: break-word;
}

th.tags-col, td.tags-col {
    width: 56px;
    overflow-wrap: break-word;
}

tr:nth-child(even) {
  background-color: #D6EEEE; /*rgba(150, 212, 212, 0.4)*/
}

tr:hover {background-color: #C4E7E7;}

/* Star button styles */
.star-button {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0;
    width: 20px;
    height: 20px;
    vertical-align: middle;
    display: inline-flex;
    align-items: center;
    justify-content: center;
}

.star-svg {
    fill: transparent;
    stroke: var(--border-color);
    stroke-width:  2;
    transition: fill 0.3s, stroke 0.3s;
    width: 16px; 
    height: 16px;
}

.star-button.active .star-svg {
    fill: #ffcc00;
    stroke: #cc9900;
}

.star-button:hover .star-svg {
    stroke: #ffa500;
}

a {
    color: var(--secondary-color);
    text-decoration: none;
    display: block;
    word-break: break-word;
}

a:hover {
    text-decoration: underline;
}

.desc-text {
    display: inline;
}

.desc-truncated {
    cursor: pointer;
    color: #555;
}

.desc-expand-toggle {
    color: #abc;
    cursor: pointer;
    user-select: none;
    margin-left: 4px;
    font-weight: bold;
}

tr.expanded td.desc-col {
    white-space: normal !important;
}

td.default-table-message {
    text-align: center;
}
/* Styling for the Import and Export Overlay */
#import-export-box {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7); /* Semi-transparent background */
    z-index: 1000; /* Higher than default */
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.close-button {
       position: absolute;
       top: 10px;
       right: 10px;
       z-index: 1001; /* Higher than overlay */
}

.import-urls {
       width: 80%;
       height: 200px;
}

#import-export-box {
       position: fixed;
       top: 0;
       left: 0;
       width: 100%;
       height: 100%;
       background-color: rgba(0, 0, 0, 0.7); /* Semi-transparent background */
       z-index: 1000; /* Higher than default */
       display: flex;
       flex-direction: column;
       align-items: center;
       justify-content: center;
}

.dragging {
    opacity: 0.5;
    cursor: grabbing;
}

[draggable="true"] {
    cursor: grab;
    user-select: none;
}

.drop-before {
  border-top: 2px solid #2196F3;
}

.drop-after {
  border-bottom: 2px solid #2196F3;
}

.drop-target {
    background: #f0f8ff;
}


/* Media Queries */
/* 320pxâ€Šâ€”â€Š480px: Mobile devices */
@media (max-width: 480px) {
    body {
        margin: 0.5rem auto;
    }
    header {
        flex-direction: column;
        align-items: flex-start;
        justify-content: center;
        .search-bar {
            width: 100%;
            margin: 5px 0;
        }
        .dropdown-button {
            width: 100%;
        }
        img, .user-icon {
            width: 100%;
            text-align: center;
        }
        th.tags-col, td.tags-col {
            width: 82px;
        }
    }
}
/* 481pxâ€Šâ€”â€Š768px: iPads, Tablets */
@media (min-width: 481px) and (max-width: 768px) {
    body {
        font-size: 14px;
        margin: 1rem auto;
        max-width: 650px;
    }
    h2 {
        font-size: 1.5rem;
        margin-bottom: 1rem;
    }
    .search-bar {
        width: 100%;
        margin: 10px 0;
    }
}
/* 769pxâ€Šâ€”â€Š1024px: Small screens, laptops */
@media (min-width: 769px) and (max-width: 1024px) {
    header {
        flex-direction: row;
        align-items: center;
        padding: 1.5rem 2rem;
        h1 {
            font-size: 2rem;
        }
        nav ul li a {
            font-size: 1.125rem;
        }
    }
    .table-wrapper {
        width: 95% !important;
        max-width: 95% !important;
        overflow-x: visible !important;
        table {
            font-size: 14px;
            table-layout: fixed;
        }
    }
}
/* 1025pxâ€Šâ€”â€Š1200px: Desktops, large screens */
@media (min-width: 1025px) and (max-width: 1200px) {
    th.favorite-col, td.favorite-col {
        width: 40px;
        white-space: nowrap !important;
    }
    th.site-col, td.site-col {
        width: 30%;
    }
    th.desc-col, td.desc-col {
        width: 65%;
        white-space: normal !important;
    }
}
/* 1201px and more: Extra large screens, TV */
@media (min-width: 1201px) {
    header {
        flex-direction: row;
    }
    .search-bar {
        width: 400px;
    }
}

<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Dashboard | Bookmark Manager Example</title>
<link rel="stylesheet" type="text/css"  href="styles.css">
</head>
	<body>
		<div class="container">
			<header role="banner" aria-label="Main site header">
				<div class="header-row" style="justify-content: space-between; width: 100%; flex-wrap: wrap;">
				    <div class="logo" role="img" aria-label="Dashboard logo">
				      <h1>Dashboard</h1>
				    </div>
				</div>
		  	</div>
			</header>
			
			<h2 style="text-align:center;">Bookmark Manager</h2>
					
				
			<div class="directory-listing">
				<span><b>Directories</b></span>
				<div>
					<ul id="directory-structure">
					<!-- Directory Structure will be dynamically generated here -->
					</ul>
				</div>
			</div>
			
			<!-- Bookmarks can be loaded into the table below when they're clicked -->
			<div class="table-wrapper">
				<table aria-label="List of bookmarks">
					<thead>
						<tr>
							<th class="favorite-col" scope="col">&#9733;</th>
							<th class="site-col" scope="col">Site</th>
							<th class="desc-col" scope="col">Description</th>
							<th class="tags-col" scope="col">Tags</th>
						</tr>
					</thead>
					<tbody id="bookmark-table-body">
						<!-- Rows of bookmarks get generated here -->
					</tbody>
				</table>
			</div>
		</div>
		  
		  <!-- What's left to do? -->
		  <!--
		  1. Drag-and-drop functionality of the directories between each other, reordering the directory structure whenever it occurs, causing parts of the structure to be rerendered.
		  2. Drag-and-drop functionality of the individual bookmarks between directories, reordering the bookmarks list whenever it occurs, causing parts of the boommarks table to be reset when the change is rendered, and then rendering the bookmarks of the selected directory once again in the table, if a single table row for said bookmark can't be removed without the entire UI being updated.
		  3. Finish the Importation and Exportation of data on the frontend only.
		  4. Creating the functionality for the Creation Options menu.
		  5. Handle updating individual bookmarks, what triggers the update to occur, how it occurs, what happens after the update occurs, how the UI is rerendered.
		  6. Handle frontend 'search box' functionality, query capture, dictionary traversal, response display (onkeypressdown functionality for auto-suggestion), response selection, and updating the UI (render{search.response.selection}).
		  7. Creating the functionality for the custom [custom_key{alt}]+right-click context menu, and the options of the context menu that essentially reference the already established features and functionality of the application.
		  8. Handling of the User Profile Icon button when clicked, what's supposed to happen, what's expected to happen, what do we need to happen.l
		  -->
		
		<script src="application_framework.js"></script>
		<script>
		// Example directory structure with bookmarks
		const directoryTree = [
		    {
		        id: 1,
		        name: "Root",
		        isOpen: true,
		        bookmarks: [],
		        children: [
		            {
		                id: 2,
		                name: "Personal",
		                isOpen: false,
		                bookmarks: [4],
		                children: [
		                    {
		                        id: 4,
		                        name: "Programming",
		                        isOpen: false,
		                        bookmarks: [1], // Reference to bookmark IDs
		                        children: [
									{
									    id: 6,
									    name: "JavaScript",
									    isOpen: false,
									    bookmarks: [],
									    children: []
									}, 
									{
									    id: 7,
									    name: "HTML",
									    isOpen: false,
									    bookmarks: [],
									    children: []
									}, 
									{
									    id: 8,
									    name: "CSS",
									    isOpen: false,
									    bookmarks: [],
									    children: []
									}, 
									{
									    id: 9,
									    name: "Python",
									    isOpen: false,
									    bookmarks: [],
									    children: []
									}, 
								]
		                    },
		                    {
		                        id: 10,
		                        name: "PC",
		                        isOpen: false,
		                        bookmarks: [5, 6, 7], // Reference to bookmark IDs
		                        children: []
		                    }
		                 ]
		              },
		              {
		                  id: 3,
		                  name: "Professional",
		                  isOpen: false,
		                  bookmarks: [2, 3], // Reference to bookmark IDs
		                  children: []
		              }
		            ]
		        }
		    ];
		
		// Example bookmark data fetched from database
		const bookmarks = [
		    {
		        id: 1,
		        url: "https://www.example.com/very-long-url-path-that-could-cause-overflow-or-breaks",
		        name: "Example Site | A Long Name",
		        description: "This is an example bookmark with a somewhat longer description than usual. It has enough text to demonstrate truncation and expansion on click. It also tests wrapping long words and URLs.",
		        isFavorite: false,
		        tags: ["example", "extended"]
		    },
		    {
		        id: 2,
		        url: "https://www.mozilla.org",
		        name: "Mozilla",
		        description: "Firefox browser homepage.",
		        isFavorite: true,
		        tags: ["Mozilla", "MDN"],
		    },
		    {
		        id: 3,
		        url: "https://www.wikipedia.org",
		        name: "Wikipedia",
		        description: "Free online encyclopedia.",
		        isFavorite: false,
		        tags: ["Wiki"]
		    },
		    {
		        id: 4,
		        url: "https://us.ecoflow.com/products/delta-pro-ultra?variant=54357493088329",
		        name: "EcoFlow | Home System",
		        description: "EcoFlow DELTA Pro Ultra Whole-Home Backup Power (UL 9540 Certificated)",
		        isFavorite: false,
		        tags: ["EcoFlow", "Solar"]
		     },
		     {
		        id: 5,
		        url: "https://a.co/d/8C1kCYL",
		        name: "Gen 5 Mobo",
		        description: "Micro Center AMD Ryzen 9 9950X CPU Processor with MSI MAG X870E Tomahawk WiFi ATX Motherboard (DDR5, PCIe 5.0 x16, M.2 Gen5, Wi-Fi 7, 5G LAN)",
		        isFavorite: false,
		        tags: ["PC", "Motherboard"]
	 	    },
		     {
		        id: 6,
		        url: "https://a.co/d/4ov0UYd",
		        name: "Gen 5 GPU",
		        description: "MSI GeForce RTX 5090 32G Gaming Trio OC 32GB GDDR7 (28Gbps/512-bit), PCIe 5, Boost: 2482MHz, HDMI 2.1b, DisplayPort 2.1b",
		        isFavorite: false,
		        tags: ["PC", "Graphics Card"]
	 	    },
		     {
		        id: 7,
		        url: "https://us.msi.com/Laptop/Titan-18-HX-Dragon-Edition-Norse-Myth-A2XWX/shopnow",
		        name: "MSI Titan Laptop",
		        description: 'MSI Titan 18 HX Dragon Edition Norse Myth A2XWJG-440US - 18" UHD+ 120Hz Mini LED - Ultra 9-285HX - RTX 5090',
		        isFavorite: false,
		        tags: ["PC", "MSI"]
	 	    }
		];

		function renderDirectoryTree(tree, parentElement) {
    // Subfunction to recursively collapse all expanded child nodes
    function collapseChildren(parentElement) {
        // Select only direct child <li> elements
        const children = parentElement.querySelectorAll(':scope > li');
        children.forEach(child => {
            if (child.classList.contains('expanded')) {
                child.classList.remove('expanded');
                child.classList.add('collapsed');
                // If this child has its own <ul>, collapse its children too
                const childUl = child.querySelector(':scope > ul');
                if (childUl) {
                    collapseChildren(childUl);
                }
            }
        });
    }

    tree.forEach(node => {
        const li = document.createElement('li');
        li.dataset.id = node.id;
        li.setAttribute('draggable', 'true');

        // Set initial class based on isOpen property
        if (node.isOpen) {
            li.classList.add('expanded');
        } else {
            li.classList.add('collapsed');
        }

        li.textContent = node.name;

        // If node has children, create nested <ul>
        if (node.children && node.children.length > 0) {
            const ul = document.createElement('ul');
            renderDirectoryTree(node.children, ul);
            li.appendChild(ul);
        }

        // Add click event to toggle collapse/expand and handle bookmarks
        li.addEventListener('click', (event) => {
            event.stopPropagation();

            const wasExpanded = li.classList.contains('expanded');

            if (wasExpanded) {
                // Collapse all expanded children before collapsing this node
                const childUl = li.querySelector(':scope > ul');
                if (childUl) {
                    collapseChildren(childUl);
                }
                li.classList.remove('expanded');
                li.classList.add('collapsed');

                // Clear bookmarks table
                const tbody = document.getElementById('bookmark-table-body');
                tbody.innerHTML = '';
                initializeBookmarkTable();
                return;
            } else {
                li.classList.remove('collapsed');
                li.classList.add('expanded');
            }

            // Handle bookmarks display logic
            const tbody = document.getElementById('bookmark-table-body');
            tbody.innerHTML = '';
            if (node.bookmarks) {
                const bookmarksToDisplay = bookmarks.filter(b => node.bookmarks.includes(b.id));
                if (bookmarksToDisplay.length > 0) {
                    renderBookmarks(bookmarksToDisplay);
                } else {
                    initializeBookmarkTable();
                }
            } else {
                initializeBookmarkTable();
            }
        });

        parentElement.appendChild(li);
    });
}

		
		function renderBookmarks(bookmarksToDisplay) {
			const DESCRIPTION_LIMIT = 35; // max characters before truncation
			const starSVG = `
			<svg class="star-svg" viewBox="0 0 24 24" aria-hidden="true" focusable="false" >
			  <polygon points="12 2 15 9 22 9 17 14 19 21 12 17 5 21 7 14 2 9 9 9"></polygon>
			</svg>
			`;
		    const tbody = document.getElementById('bookmark-table-body');
		    tbody.innerHTML = ''; // Clear existing content
		
		    bookmarksToDisplay.forEach(bookmark => {
		        const tr = document.createElement('tr');
				tr.dataset.id = bookmark.id;
				tr.setAttribute('draggable', 'true');
		
		        // Favorite star button cell
		        const favoriteTd = document.createElement('td');
		                favoriteTd.classList.add('favorite-col');
		        const starButton = document.createElement('button');
		        starButton.classList.add('star-button');
		        if (bookmark.isFavorite) {
		            starButton.classList.add('active');
		        }
		        starButton.setAttribute('aria-label', bookmark.isFavorite ? 'Unmark as favorite' : 'Mark as favorite');
		        starButton.innerHTML = starSVG;
		        starButton.addEventListener('click', () => {
		            bookmark.isFavorite = !bookmark.isFavorite;
		            starButton.classList.toggle('active');
		            starButton.setAttribute('aria-label', bookmark.isFavorite ? 'Unmark as favorite' : 'Mark as favorite');
		        });
		        favoriteTd.appendChild(starButton);
		        tr.appendChild(favoriteTd);
		
		        // Site cell
		        const siteTd = document.createElement('td');
		        siteTd.classList.add('site-col');
		        const anchor = document.createElement('a');
		        anchor.href = bookmark.url;
		        anchor.target = "_blank";
		        anchor.rel = "noopener noreferrer";
		        anchor.textContent = bookmark.name;
		        siteTd.appendChild(anchor);
		        tr.appendChild(siteTd);
		
		        // Description cell with truncation and expand
		        const descTd = document.createElement('td');
		        descTd.classList.add('desc-col');
		
		        const fullDesc = bookmark.description;
		        if (fullDesc.length > DESCRIPTION_LIMIT) {
		            const truncatedText = fullDesc.slice(0, DESCRIPTION_LIMIT - 3);
		            const descSpan = document.createElement('span');
		            descSpan.classList.add('desc-text', 'desc-truncated');
		            descSpan.textContent = truncatedText;
		
		            const toggleSpan = document.createElement('span');
		            toggleSpan.classList.add('desc-expand-toggle');
		            toggleSpan.textContent = "...";
		
		            toggleSpan.addEventListener('click', () => {
		                const isExpanded = tr.classList.toggle('expanded');
		                if (isExpanded) {
		                    descSpan.textContent = fullDesc;
		                    descSpan.classList.remove('desc-truncated');
		                    toggleSpan.textContent = "\u21A9";
		                } else {
		                    descSpan.textContent = truncatedText;
		                    descSpan.classList.add('desc-truncated');
		                    toggleSpan.textContent = "...";
		                }
		            });
		
		            descTd.appendChild(descSpan);
		            descTd.appendChild(toggleSpan);
		        } else {
		            const descSpan = document.createElement('span');
		            descSpan.classList.add('desc-text');
		            descSpan.textContent = fullDesc;
		            descTd.appendChild(descSpan);
		        }
		        tr.appendChild(descTd);
		        
		        // Tags cell
		        const tagsTd = document.createElement('td');
		        tagsTd.classList.add('tags-col');
		        const tagsSpan = document.createElement('span');
		        tagsSpan.textContent = bookmark.tags.join(', ');
		        tagsTd.appendChild(tagsSpan);
		        tr.appendChild(tagsTd);
		
		        tbody.appendChild(tr);
		    });
		}
		
		function updateUI() {
		    displayDirectoryStructure();
		    initializeBookmarkTable();
		}
		
		function displayDirectoryStructure() {
		    const directoryStructureElement = document.getElementById('directory-structure');
		    directoryStructureElement.innerHTML = ''; // Clear existing content
		    renderDirectoryTree(directoryTree, directoryStructureElement);
		}
		
		function initializeBookmarkTable() {
		    const tbody = document.getElementById('bookmark-table-body');
		    const rootDirectory = directoryTree[0]; // Assuming the first item is the root
		
		    // Check if there are bookmarks associated with the root directory
		    const bookmarksToDisplay = bookmarks.filter(b => rootDirectory.bookmarks && rootDirectory.bookmarks.includes(b.id));
		
		    if (bookmarksToDisplay.length === 0) {
		        // Create a new row and cell for the message
		        const tr = document.createElement('tr');
		        const td = document.createElement('td');
		        td.classList.add('default-table-message')
		        td.colSpan = 4; // Span across all columns
		        td.innerHTML = 'If this is your first time using this application:<br>Check out the options in the menu.<br><br><u>Bookmarks will be displayed here.</u><br>To see your bookmarks,<br>please navigate through the directory tree above.';
		        tr.appendChild(td);
		        tbody.appendChild(tr);
		    } else {
		        // If there are bookmarks, render them
		        renderBookmarks(bookmarksToDisplay);
		    }
		}
		
		function getCurrentDirectory() {
    const activeLi = document.querySelector('#directory-structure li.expanded');
    if (!activeLi) return directoryTree[0];
    return directoryTree.find(node => node.id === parseInt(activeLi.dataset.id));
}
		
		const DragDropManager = (() => {
  // Private state
  let dragState = null;
  let directoryTree = [];
  let bookmarks = [];
  let updateUICallback = () => {};

  // DOM elements
  const domElements = {
    directoryStructure: null,
    bookmarkTableBody: null
  };

  // Main setup function
  function initialize(config) {
    ({ directoryTree: directoryTree, bookmarks: bookmarks, updateUICallback } = config);
    domElements.directoryStructure = document.getElementById('directory-structure');
    domElements.bookmarkTableBody = document.getElementById('bookmark-table-body');
    
    setupDirectoryDragDrop();
    setupBookmarkDragDrop();
  }

  //#region Directory Drag & Drop
  function setupDirectoryDragDrop() {
    domElements.directoryStructure.addEventListener('dragstart', handleDirectoryDragStart);
    domElements.directoryStructure.addEventListener('dragover', handleDirectoryDragOver);
    domElements.directoryStructure.addEventListener('dragleave', handleDirectoryDragLeave);
    domElements.directoryStructure.addEventListener('drop', handleDirectoryDrop);
  }

  function handleDirectoryDragStart(e) {
    const li = e.target.closest('li');
    if (!li) return;
    if (li.dataset.id === "1") return; // Prevent dragging root
    
    
    dragState = {
      type: 'directory',
      id: parseInt(li.dataset.id),
      element: li,
      parent: li.parentNode
    };
    
    e.dataTransfer.effectAllowed = 'move';
    li.classList.add('dragging');
  }

  function handleDirectoryDragOver(e) {
    e.preventDefault();
    const li = e.target.closest('li');
    if (!li || !dragState || dragState.type !== 'directory') return;

    const rect = li.getBoundingClientRect();
    const isAfter = (e.clientY - rect.top) / rect.height > 0.5;
    
    li.classList.add(isAfter ? 'drop-after' : 'drop-before');
    e.dataTransfer.dropEffect = 'move';
  }

  function handleDirectoryDragLeave(e) {
    const li = e.target.closest('li');
    if (li) li.classList.remove('drop-before', 'drop-after');
  }

  function handleDirectoryDrop(e) {
  	function isDescendant(parent, child) {
  if (!parent.children) return false;
  for (let c of parent.children) {
    if (c.id === child.id || isDescendant(c, child)) return true;
  }
  return false;
}

    e.preventDefault();
    const targetLi = e.target.closest('li');
    if (!targetLi || !dragState || dragState.type !== 'directory') return;

    const targetId = parseInt(targetLi.dataset.id);
    const [sourceNode, sourceParent] = findNodeById(dragState.id);
    const [targetNode, targetParent] = findNodeById(targetId);

    if (sourceNode && targetNode && sourceParent && targetParent) {
      // Remove from old position
      const sourceIndex = sourceParent.children.findIndex(n => n.id === sourceNode.id);
      sourceParent.children.splice(sourceIndex, 1);
      
      if (oldDirectory && oldDirectory.id === targetDirectory.id) return;
      
      if (isDescendant(sourceNode, targetNode)) {
    alert("Cannot move a directory into its own child!");
    return;
    
		if (dragState.id === targetId) return; // Cannot drop onto itself
		

    
}

      // Add to new position
      const targetIndex = targetParent.children.findIndex(n => n.id === targetNode.id);
      const insertPosition = (e.clientY - targetLi.getBoundingClientRect().top) > 
        targetLi.offsetHeight / 2 ? targetIndex + 1 : targetIndex;
      
      targetParent.children.splice(insertPosition, 0, sourceNode);
      updateUICallback();
    }

    cleanupDragState();
  }
  //#endregion

  //#region Bookmark Drag & Drop
  function setupBookmarkDragDrop() {
    domElements.bookmarkTableBody.addEventListener('dragstart', handleBookmarkDragStart);
    domElements.directoryStructure.addEventListener('dragover', handleBookmarkDragOver);
    domElements.directoryStructure.addEventListener('drop', handleBookmarkDrop);
  }

  function handleBookmarkDragStart(e) {
    const tr = e.target.closest('tr');
    if (!tr) return;
    
    dragState = {
      type: 'bookmark',
      id: parseInt(tr.dataset.